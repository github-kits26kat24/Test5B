pipeline {
    agent any
    
    parameters {
        choice(name: "TARGET_Env", choices: ["dev", "sit"], description: "Target Deployment Environment")
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_REGION = 'eu-west-1'
    }
    
    stages {
        stage("download code and env config") {
            steps {
                sh "git clone https://github.com/github-kits26kat24/Test5B.git"
            }
        }

        stage('terraform validate') {
            steps {
                sh '''
                    cd Test5B/Code
                    echo 'about to perform code validation'
                    terraform init --backend-config=../Env/dev/backend.tfvars
                    terraform validate
                '''
            }
        }

         stage('terraform plan') {
            steps {
                sh '''
                    cd Test5B/Code
                    echo 'about to perform terraform plan'
                    terraform plan --var-file ../Env/dev/backend.tfvars --var-file ../Env/dev/ec2.tfvars --auto-approve
                    terraform plan
                '''
                script {
                    env.NEXT_STEP = input message: 'Implement plan?', ok: 'Implement',
                    parameters: [choice(name: 'Implement', choices: ['init', 'plan', 'apply', 'destroy', 'do nothing'], description: 'implementation stage')]
                }
            }
        }

        stage('implement apply') {
            when {
                expression {
                    env.NEXT_STEP == 'apply'
                }
            }
            steps {
                sh '''
                    cd Test5B/Code
                    echo 'about to perform terraform apply'
                    terraform apply --var-file ../Env/dev/backend.tfvars --var-file ../Env/dev/ec2.tfvars --auto-approve
                    terraform apply
                '''
            }
        }

        stage('implement destroy') {
            when {
                expression {
                    env.NEXT_STEP == 'destroy'
                }
            }
            steps {
                sh '''
                    cd Test5B/Code
                    echo 'about to perform terraform destroy'
                    terraform destroy --var-file ../Env/dev/backend.tfvars --var-file ../Env/dev/ec2.tfvars --auto-approve
                    terraform destroy
                '''
            }
        }
    }
    
    post {
        always {
            deleteDir()
        }
    }
}
