pipeline {
    agent any
    
    parameters {
        choice(name: "TARGET_Env", choices: ["dev", "sit"], description: "Please select the implementation stage Target Deployment Environment")
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_REGION = 'eu-west-1'
    }
    
    stages {
        stage("download code and env config") {
            steps {
                sh "git clone https://github.com/github-kits26kat24/Test5B.git"
            }
        }

        stage('terraform validate') {
            steps {
                sh '''
                    cd Test5B/Code
                    echo 'about to perform code validation'
                    terraform init --backend-config=../Env/"${TARGET_Env}"/backend.tfvars
                    terraform validate
                '''
            }
        }

        stage('implement plan') {
            steps {
                sh '''
                    cd Test5B/Code
                    echo 'about to perform terraform plan'
                    terraform plan --var-file ../Env/"${TARGET_Env}"/backend.tfvars --var-file ../Env/"${TARGET_Env}"/ec2.tfvars
                    terraform plan
                '''
            }
        }

        stage ('terraform deploy') {
             options {
                timeout (time: 2, unit: 'MINUTES')
            }

            steps  {
                input (message : "Happy to deploy?")
                echo 'would have deploy'
            }
        }


       stages {
        stage('Choose Action') {
            steps {
                script {
                    def userChoice = input(
                        message: 'Select an action:',
                        parameters: [
                            choice(name: 'actionChoice', choices: ['apply', 'destroy'], description: 'Choose to apply or destroy')
                        ]
                    )

                    if (userChoice == 'apply') {
                        echo "User chose to apply the Terraform configuration."
                        // Call the stage for applying the Terraform configuration
                        stage('Apply Terraform') {
                            steps {
                                sh '''
                                    cd Test5B/Code
                                    echo 'about to perform terraform apply'
                                    terraform apply --var-file ../Env/"${TARGET_Env}"/backend.tfvars --var-file ../Env/"${TARGET_Env}"/ec2.tfvars --auto-approve
                                '''
                            }
                        }
                    } else if (userChoice == 'destroy') {
                        echo "User chose to destroy the Terraform configuration."
                        // Call the stage for destroying the Terraform configuration
                        stage('Destroy Terraform') {
                            steps {
                                sh '''
                                    cd Test5B/Code
                                    echo 'about to perform terraform destroy'
                                    terraform destroy --var-file ../Env/dev/backend.tfvars --var-file ../Env/dev/ec2.tfvars --auto-approve
                                '''
                            }
                        }
                    } else {
                        error "Invalid choice: ${userChoice}"
                    }
                }
            }
        }

        stage ('Delete RDS Snapshot') {
            steps {
               script {
                   def snapshotIdentifier = "mariadb-final-snapshot" // Replace with the actual snapshot identifier

                   def deleteSnapshotCmd = "aws rds delete-db-snapshot --db-snapshot-identifier ${snapshotIdentifier}"
            
                   def deleteSnapshotResult = sh(script: deleteSnapshotCmd, returnStatus: true)
            
                   if (deleteSnapshotResult == 0) {
                   echo "Snapshot ${snapshotIdentifier} deleted successfully."
                     } else {
                        error "Failed to delete snapshot ${snapshotIdentifier}."
                    }

            steps {
                 sh '''
                    cd Test5B/Code
                    echo 'about to perform terraform destroy'
                    terraform destroy --var-file ../Env/dev/backend.tfvars --var-file ../Env/dev/ec2.tfvars --auto-approve
                     '''
                    }
                }
            }
        }
          
    }  
    
        post {
           always {
            deleteDir()
            }
       }
    }
}    
